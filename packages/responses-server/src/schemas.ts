import { z } from "zod";

/**
 * https://platform.openai.com/docs/api-reference/responses/create
 * commented out properties are not supported by the server
 */
export const createResponseSchema = z.object({
	// background: z.boolean().default(false),
	// include:
	input: z.union([
		z.string(),
		z.array(
			// z.union([
			z.object({
				content: z.union([
					z.string(),
					z.array(
						z.union([
							z.object({
								type: z.literal("input_text"),
								text: z.string(),
							}),
							z.object({
								type: z.literal("input_image"),
								// file_id: z.string().optional(),
								image_url: z.string(),
								// detail: z.enum(["auto", "low", "high"]).default("auto"),
							}),
							// z.object({
							// 	type: z.literal("input_file"),
							// 	file_data: z.string().optional(),
							// 	file_id: z.string().optional(),
							// 	filename: z.string().optional(),
							// }),
						])
					),
				]),
				role: z.enum(["user", "assistant", "system", "developer"]),
				type: z.enum(["message"]).default("message"),
			})
			// z.object({}), // An item representing part of the context for the response to be generated by the model
			// z.object({
			// 	id: z.string(),
			// 	type: z.enum(["item_reference"]).default("item_reference"),
			// }),
			// ])
		),
	]),
	instructions: z.string().optional(),
	// max_output_tokens: z.number().min(0).optional(),
	// max_tool_calls: z.number().min(0).optional(),
	// metadata: z.record(z.string().max(64), z.string().max(512)).optional(), // + 16 items max
	model: z.string(),
	// previous_response_id: z.string().optional(),
	// reasoning: z.object({
	// 	effort: z.enum(["low", "medium", "high"]).default("medium"),
	// 	summary: z.enum(["auto", "concise", "detailed"]).optional(),
	// }),
	// store: z.boolean().default(true),
	// stream: z.boolean().default(false),
	temperature: z.number().min(0).max(2).default(1),
	// text:
	// tool_choice:
	// tools:
	// top_logprobs: z.number().min(0).max(20).optional(),
	top_p: z.number().min(0).max(1).default(1),
	// truncation: z.enum(["auto", "disabled"]).default("disabled"),
	// user
});

export type CreateResponse = z.infer<typeof createResponseSchema>;

export const responseSchema = z.object({
	object: z.literal("response"),
	created_at: z.number(),
	error: z
		.object({
			code: z.string(),
			message: z.string(),
		})
		.optional(),
	id: z.string(),
	status: z.enum(["completed", "failed", "in_progress", "cancelled", "queued", "incomplete"]),
	// incomplete_details: z.object({ reason: z.string() }).optional(),
	instructions: z.string().optional(),
	// max_output_tokens: z.number().min(0).optional(),
	// max_tool_calls: z.number().min(0).optional(),
	// metadata: z.record(z.string().max(64), z.string().max(512)).optional(), // + 16 items max
	model: z.string(),
	output: z.array(
		z.object({
			type: z.enum(["message"]),
			id: z.string(),
			status: z.enum(["completed", "failed"]),
			role: z.enum(["assistant"]),
			content: z.array(
				z.union([
					z.object({
						type: z.literal("output_text"),
						text: z.string(),
						// annotations:
						// logprobs:
					}),
					z.object({
						type: z.literal("refusal"),
						refusal: z.string(),
					}),
				])
			),
		})
		// in practice, should be a z.union of the following:
		// File search tool call
		// Function tool call
		// Web search tool call
		// Computer tool call
		// Reasoning
		// Image generation call
		// Code interpreter tool call
		// Local shell call
		// MCP tool call
		// MCP list tools
		// MCP approval request
	),
	// parallel_tool_calls: z.boolean(),
	// previous_response_id: z.string().optional(),
	// reasoning: z.object({
	// 	effort: z.enum(["low", "medium", "high"]).optional(),
	// 	summary: z.enum(["auto", "concise", "detailed"]).optional(),
	// }),
	// store: z.boolean(),
	temperature: z.number(),
	// text:
	// tool_choice:
	// tools:
	// top_logprobs: z.number().int().min(0).max(20).optional(),
	top_p: z.number(),
	// truncation: z.enum(["auto", "disabled"]).default("disabled"),
	// usage: ...
	// user
});

export type Response = z.infer<typeof responseSchema>;
